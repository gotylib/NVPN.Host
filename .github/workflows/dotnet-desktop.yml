name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_COMPOSE_VERSION: v2.24.5
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  PROJECT_DIR: "/root/NVPN.Host"

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Use .NET 8.0 (LTS) instead of 9.x
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Backend build and test
    - name: Build and test backend
      run: |
        find . -name "*.csproj" -not -path "*/nvpn-host-client/*" -exec dotnet restore {} \;
        find . -name "*.csproj" -not -path "*/nvpn-host-client/*" -exec dotnet build {} --configuration Release --no-restore \;
        find . -name "*.csproj" -not -path "*/nvpn-host-client/*" -exec dotnet test {} --verbosity normal \;

    # Frontend setup
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: 'nvpn-host-client/package-lock.json'

    - name: Install and build frontend
      working-directory: ./nvpn-host-client
      run: |
        npm ci --no-audit
        npm run build
        npm run lint --if-present
        npm test --if-present

  deploy:
    name: Deploy to Production
    needs: build_and_test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker tools
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl enable --now docker
        sudo curl -fsSL https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --versio

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose -f compose.yaml build
        docker-compose -f compose.yaml push

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script_timeout: 15m
        envs: PROJECT_DIR
        script: |
          echo "Starting deployment..."
          cd $PROJECT_DIR || exit
          git config --global --add safe.directory $PROJECT_DIR
          git pull origin main
          docker-compose down --remove-orphans
          docker-compose pull
          docker-compose up -d --build
          docker system prune -af
          echo "Deployment completed successfully!"
